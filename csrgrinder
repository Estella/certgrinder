#!/bin/sh
####################################################
# This file is part of certgrinder.
# The latest version can be found on Github at
# https://github.com/tykling/certgrinder
####################################################

# get CSR from stdin and write to a temp file
STDIN=$(cat)
CSRFILE=$(mktemp)
echo "$STDIN" > $CSRFILE

# are we in testmode?
if [ "$#" -eq "1" -a "$1" = "test" ]; then
    TEST="--staging"
    MODE="test"
else
    TEST=
    MODE="production"
fi

logger "Wrote $(stat -f%z $CSRFILE) bytes CSR from client $SSH_CLIENT to temp file $CSRFILE (running in $MODE mode)"

# get a temp filename for the certificate
FULLCHAINFILE=$(mktemp)

# also specify --cert-path and --chain-path to avoid certbot writing them in the homedir as .pem files
CHAINFILE=$(mktemp)
CERTFILE=$(mktemp)
rm -f $CHAINFILE $FULLCHAINFILE $CERTFILE

# issue new certificate
COMMAND="sudo /usr/local/bin/certbot certonly --non-interactive --quiet --config /usr/local/etc/letsencrypt/letsencrypt.ini --csr $CSRFILE --fullchain-path $FULLCHAINFILE --cert-path $CERTFILE --chain-path $CHAINFILE $TEST"
logger "Running certbot command: $COMMAND"
$COMMAND

# check certbot exit code
if [ $? -eq 0 ]; then
    logger "Success. Certbot wrote $(stat -f%z $CERTFILE) bytes certificate chain to $CERTFILE - sending to stdout and cleaning up temp files"
    # output full certificate chain to stdout
    cat $FULLCHAINFILE
else
    logger "Failure. Certbot exit code was $?"
fi

# clean up temp files (some of these may not exist if certbot failed for some reason)
rm -f $CSRFILE $CERTFILE $CHAINFILE $FULLCHAINFILE

